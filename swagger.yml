{
  "swagger": "2.0",
  "info": {
    "title": "Custom Vision Training 1.2",
    "version": "1.0"
  },
  "host": "southcentralus.api.cognitive.microsoft.com",
  "basePath": "/customvision/v1.2/Training",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Training-key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "Training-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "paths": {
    "/projects/{projectId}/images": {
      "post": {
        "description": "This API accepts body content as multipart/form-data and application/octet-stream. When using multipart\r\nmultiple image files can be sent at once, with a maximum of 64 files",
        "operationId": "createImagesFromData",
        "summary": "CreateImagesFromData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "The tags ids with which to tag each image. Limited to 20",
            "type": "string"
          },
          {
            "name": "imageData",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageCreateSummary"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      },
      "delete": {
        "description": "Delete images from the set of training images",
        "operationId": "deleteImages",
        "summary": "DeleteImages",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageIds",
            "in": "query",
            "description": "Ids of the images to be deleted. Limted to 256 images per batch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projects/{projectId}/images/files": {
      "post": {
        "description": "Add the provided batch of images to the set of training images",
        "operationId": "createImagesFromFiles",
        "summary": "CreateImagesFromFiles",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageFileCreateBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImageFileCreateBatch"
            },
            "description": "The batch of image files to add. Limited to 64 images and 20 tags per batch"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageCreateSummary"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/images/predictions": {
      "post": {
        "description": "Add the specified predicted images to the set of training images",
        "operationId": "createImagesFromPredictions",
        "summary": "CreateImagesFromPredictions",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageIdCreateBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImageIdCreateBatch"
            },
            "description": "Image and tag ids. Limted to 64 images and 20 tags per batch"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageCreateSummary"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/images/urls": {
      "post": {
        "description": "Add the provided images urls to the set of training images",
        "operationId": "createImagesFromUrls",
        "summary": "CreateImagesFromUrls",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageUrlCreateBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImageUrlCreateBatch"
            },
            "description": "Image urls and tag ids. Limited to 64 images and 20 tags per batch"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageCreateSummary"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects": {
      "post": {
        "description": "Create a project",
        "operationId": "createProject",
        "summary": "CreateProject",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the project",
            "type": "string"
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "Format - uuid. The id of the domain to use for this project. Defaults to General",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      },
      "get": {
        "description": "Get your projects",
        "operationId": "getProjects",
        "summary": "GetProjects",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectArray"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/tags": {
      "post": {
        "description": "Create a tag for the project",
        "operationId": "createTag",
        "summary": "CreateTag",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The tag name",
            "required": true,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Optional description for the tag",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      },
      "get": {
        "description": "Get the tags for a given project and iteration",
        "operationId": "getTags",
        "summary": "GetTags",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "query",
            "description": "Format - uuid. The iteration id. Defaults to workspace",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TagList"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/images/tags": {
      "delete": {
        "description": "Remove a set of tags from a set of images",
        "operationId": "deleteImageTags",
        "summary": "DeleteImageTags",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageIds",
            "in": "query",
            "description": "Image ids. Limited to 64 images",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "Tags to be deleted from the specified images. Limted to 20 tags",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "post": {
        "description": "Associate a set of images with a set of tags",
        "operationId": "postImageTags",
        "summary": "PostImageTags",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageTagCreateBatch",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImageTagCreateBatch"
            },
            "description": "Batch of image tags. Limited to 128 tags per batch"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageTagCreateSummary"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/iterations/{iterationId}": {
      "delete": {
        "description": "Delete a specific iteration of a project",
        "operationId": "deleteIteration",
        "summary": "DeleteIteration",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "path",
            "description": "Format - uuid. The iteration id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "description": "Get a specific iteration",
        "operationId": "getIteration",
        "summary": "GetIteration",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The id of the project the iteration belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "path",
            "description": "Format - uuid. The id of the iteration to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      },
      "patch": {
        "description": "Update a specific iteration",
        "operationId": "updateIteration",
        "summary": "UpdateIteration",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. Project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "path",
            "description": "Format - uuid. Iteration id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iteration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Iteration"
            },
            "description": "The updated iteration model"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/predictions": {
      "delete": {
        "description": "Delete a set of predicted images and their associated prediction results",
        "operationId": "deletePrediction",
        "summary": "DeletePrediction",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The prediction ids. Limited to 64",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "delete": {
        "description": "Delete a specific project",
        "operationId": "deleteProject",
        "summary": "DeleteProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "description": "Get a specific project",
        "operationId": "getProject",
        "summary": "GetProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The id of the project to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      },
      "patch": {
        "description": "Update a specific project",
        "operationId": "updateProject",
        "summary": "UpdateProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The id of the project to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            },
            "description": "The updated project model"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/tags/{tagId}": {
      "delete": {
        "description": "Delete a tag from the project",
        "operationId": "deleteTag",
        "summary": "DeleteTag",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "Format - uuid. Id of the tag to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "description": "Get information about a specific tag",
        "operationId": "getTag",
        "summary": "GetTag",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project this tag belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "Format - uuid. The tag id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "query",
            "description": "Format - uuid. The iteration to retrieve this tag from. Optional, defaults to current training set",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      },
      "patch": {
        "description": "Update a tag",
        "operationId": "updateTag",
        "summary": "UpdateTag",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "Format - uuid. The id of the target tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "tag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Tag"
            },
            "description": "The updated tag model"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/iterations/{iterationId}/export": {
      "post": {
        "description": "Export a trained iteration",
        "operationId": "exportIteration",
        "summary": "ExportIteration",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "path",
            "description": "Format - uuid. The iteration id",
            "required": true,
            "type": "string"
          },
          {
            "name": "platform",
            "in": "query",
            "description": "The target platform (coreml or tensorflow)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Export"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      },
      "get": {
        "description": "Get the list of exports for a specific iteration",
        "operationId": "getExports",
        "summary": "GetExports",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "path",
            "description": "Format - uuid. The iteration id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExportArray"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/account": {
      "get": {
        "description": "Get basic information about your account",
        "operationId": "getAccountInfo",
        "summary": "GetAccountInfo",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/domains/{domainId}": {
      "get": {
        "description": "Get information about a specific domain",
        "operationId": "getDomain",
        "summary": "GetDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "Format - uuid. The id of the domain to get information about",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/domains": {
      "get": {
        "description": "Get a list of the available domains",
        "operationId": "getDomains",
        "summary": "GetDomains",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainArray"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/iterations/{iterationId}/performance": {
      "get": {
        "description": "Get detailed performance information about a trained iteration",
        "operationId": "getIterationPerformance",
        "summary": "GetIterationPerformance",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "path",
            "description": "Format - uuid. The id of the trained iteration",
            "required": true,
            "type": "string"
          },
          {
            "name": "threshold",
            "in": "query",
            "description": "Format - float. The 0 to 1 threshold to determine positive prediction",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IterationPerformance"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/iterations": {
      "get": {
        "description": "Get iterations for the project",
        "operationId": "getIterations",
        "summary": "GetIterations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/IterationArray"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/images/tagged": {
      "get": {
        "description": "This API supports batching and range selection. By default it will only return first 50 images matching images.\r\nUse the {take} and {skip} parameters to control how many images to return in a given batch.\r\nThe filtering is on an and/or relationship. For example, if the provided tag ids are for the \"Dog\" and\r\n\"Cat\" tags, then only images tagged with Dog and/or Cat will be returned",
        "operationId": "getTaggedImages",
        "summary": "GetTaggedImages",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "query",
            "description": "Format - uuid. The iteration id. Defaults to workspace",
            "type": "string"
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "An list of tags ids to filter the images. Defaults to all tagged images when null. Limited to 20",
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The ordering. Defaults to newest",
            "type": "string",
            "enum": [
              "Newest",
              "Oldest"
            ]
          },
          {
            "name": "take",
            "in": "query",
            "description": "Format - int32. Maximum number of images to return. Defaults to 50, limited to 256",
            "type": "integer",
            "default": "50"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Format - int32. Number of images to skip before beginning the image batch. Defaults to 0",
            "type": "integer",
            "default": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageArray"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/images/untagged": {
      "get": {
        "description": "This API supports batching and range selection. By default it will only return first 50 images matching images.\r\nUse the {take} and {skip} parameters to control how many images to return in a given batch.",
        "operationId": "getUntaggedImages",
        "summary": "GetUntaggedImages",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "query",
            "description": "Format - uuid. The iteration id. Defaults to workspace",
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "The ordering. Defaults to newest",
            "type": "string",
            "enum": [
              "Newest",
              "Oldest"
            ]
          },
          {
            "name": "take",
            "in": "query",
            "description": "Format - int32. Maximum number of images to return. Defaults to 50, limited to 256",
            "type": "integer",
            "default": "50"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Format - int32. Number of images to skip before beginning the image batch. Defaults to 0",
            "type": "integer",
            "default": "0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageArray"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/predictions/query": {
      "post": {
        "description": "Get images that were sent to your prediction endpoint",
        "operationId": "queryPredictionResults",
        "summary": "QueryPredictionResults",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "predictionQueryToken",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PredictionQueryToken"
            },
            "description": "Parameters used to query the predictions. Limited to combining 2 tags"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PredictionQuery"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/quicktest/image": {
      "post": {
        "description": "Quick test an image",
        "operationId": "quickTestImage",
        "summary": "QuickTestImage",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "query",
            "description": "Format - uuid. Optional. Specifies the id of a particular iteration to evaluate against.\r\n            The default iteration for the project will be used when not specified.",
            "type": "string"
          },
          {
            "name": "imageData",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImagePredictionResult"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/quicktest/url": {
      "post": {
        "description": "Quick test an image url",
        "operationId": "quickTestImageUrl",
        "summary": "QuickTestImageUrl",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project to evaluate against",
            "required": true,
            "type": "string"
          },
          {
            "name": "iterationId",
            "in": "query",
            "description": "Format - uuid. Optional. Specifies the id of a particular iteration to evaluate against.\r\n            The default iteration for the project will be used when not specified.",
            "type": "string"
          },
          {
            "name": "imageUrl",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ImageUrl"
            },
            "description": "An {Iris.Web.Api.Models.ImageUrl} that contains the url of the image to be evaluated"
          }
        ],
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImagePredictionResult"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    },
    "/projects/{projectId}/train": {
      "post": {
        "description": "Queues project for training",
        "operationId": "trainProject",
        "summary": "TrainProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Format - uuid. The project id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Iteration"
            }
          }
        },
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ]
      }
    }
  },
  "definitions": {
    "Account": {
      "description": "Represents a user account",
      "type": "object",
      "properties": {
        "UserName": {
          "description": "Gets the name of the account owner",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Email": {
          "description": "Gets the email associated with this account",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Keys": {
          "$ref": "#/definitions/ApiKeys",
          "description": "Gets the api keys associated with this account",
          "readOnly": true
        },
        "Quotas": {
          "$ref": "#/definitions/AccountQuota",
          "description": "Gets the quotas associated with this account",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "ApiKeys": {
      "type": "object",
      "properties": {
        "TrainingKeys": {
          "$ref": "#/definitions/KeyPair"
        },
        "PredictionKeys": {
          "$ref": "#/definitions/KeyPair"
        }
      },
      "x-nullable": true
    },
    "AccountQuota": {
      "description": "Represents a set of quotas assocated with an account",
      "type": "object",
      "properties": {
        "Tier": {
          "description": "Gets the tier of user",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Projects": {
          "$ref": "#/definitions/Quota",
          "description": "Gets the project quota",
          "readOnly": true
        },
        "Predictions": {
          "$ref": "#/definitions/Quota",
          "description": "Gets the prediction quota",
          "readOnly": true
        },
        "PerProject": {
          "description": "Gets a list of quotas that apply per-project for each project",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerProjectQuota"
          },
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "KeyPair": {
      "type": "object",
      "properties": {
        "PrimaryKey": {
          "type": "string",
          "x-nullable": true
        },
        "SecondaryKey": {
          "type": "string",
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "Quota": {
      "description": "Represents a quota",
      "type": "object",
      "properties": {
        "Total": {
          "format": "int32",
          "description": "The total allowable amount in the quota",
          "type": "integer",
          "readOnly": true,
          "x-nullable": false
        },
        "Used": {
          "format": "int32",
          "description": "The amount of quota that has currently been used",
          "type": "integer",
          "readOnly": true,
          "x-nullable": false
        },
        "TimeUntilReset": {
          "format": "duration",
          "description": "Gets the time remaining until the quota resets. Null if this quota does not reset.",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "PerProjectQuota": {
      "description": "Represents a set of quotas for a given project",
      "type": "object",
      "properties": {
        "ProjectId": {
          "format": "uuid",
          "description": "Gets the project id of the project this quota applies to",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Iterations": {
          "$ref": "#/definitions/Quota",
          "description": "Gets the iteration quota for the project",
          "readOnly": true
        },
        "Images": {
          "$ref": "#/definitions/Quota",
          "description": "Gets the image quota for the project",
          "readOnly": true
        },
        "Tags": {
          "$ref": "#/definitions/Quota",
          "description": "Gets the tag quota for the project",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "Domain": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Name": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Exportable": {
          "type": "boolean",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "Image": {
      "description": "Image model to be sent as JSON",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Created": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Width": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "x-nullable": false
        },
        "Height": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "x-nullable": false
        },
        "ImageUri": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "ThumbnailUri": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageTag"
          },
          "readOnly": true,
          "x-nullable": true
        },
        "Predictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PredictionTag"
          },
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageTag": {
      "type": "object",
      "properties": {
        "TagId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Created": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "PredictionTag": {
      "type": "object",
      "properties": {
        "TagId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Tag": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Probability": {
          "format": "float",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "ImageCreateSummary": {
      "type": "object",
      "properties": {
        "IsBatchSuccessful": {
          "type": "boolean",
          "readOnly": true,
          "x-nullable": false
        },
        "Images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageCreateResult"
          },
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageCreateResult": {
      "type": "object",
      "properties": {
        "SourceUrl": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Status": {
          "enum": [
            "OK",
            "OKDuplicate",
            "ErrorSource",
            "ErrorImageFormat",
            "ErrorImageSize",
            "ErrorStorage",
            "ErrorLimitExceed",
            "ErrorTagLimitExceed",
            "ErrorUnknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Image": {
          "$ref": "#/definitions/Image",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "ImageFileCreateBatch": {
      "type": "object",
      "properties": {
        "Images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageFileCreateEntry"
          },
          "x-nullable": true
        },
        "TagIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "x-nullable": false
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageFileCreateEntry": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "x-nullable": true
        },
        "Contents": {
          "format": "byte",
          "type": "string",
          "x-nullable": true
        },
        "TagIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "x-nullable": false
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageUrlCreateBatch": {
      "type": "object",
      "properties": {
        "Images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageUrlCreateEntry"
          },
          "x-nullable": true
        },
        "TagIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "x-nullable": false
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageUrlCreateEntry": {
      "type": "object",
      "properties": {
        "Url": {
          "type": "string",
          "x-nullable": true
        },
        "TagIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "x-nullable": false
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageIdCreateBatch": {
      "type": "object",
      "properties": {
        "Images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageIdCreateEntry"
          },
          "x-nullable": true
        },
        "TagIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "x-nullable": false
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageIdCreateEntry": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "x-nullable": false
        },
        "TagIds": {
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "x-nullable": false
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageTagCreateBatch": {
      "type": "object",
      "properties": {
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageTagCreateEntry"
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageTagCreateEntry": {
      "type": "object",
      "properties": {
        "ImageId": {
          "format": "uuid",
          "type": "string",
          "x-nullable": false
        },
        "TagId": {
          "format": "uuid",
          "type": "string",
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "ImageTagCreateSummary": {
      "type": "object",
      "properties": {
        "Created": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageTagCreateEntry"
          },
          "x-nullable": true
        },
        "Duplicated": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageTagCreateEntry"
          },
          "x-nullable": true
        },
        "Exceeded": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageTagCreateEntry"
          },
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "PredictionQueryToken": {
      "type": "object",
      "properties": {
        "Session": {
          "type": "string",
          "x-nullable": true
        },
        "Continuation": {
          "type": "string",
          "x-nullable": true
        },
        "MaxCount": {
          "format": "int32",
          "type": "integer",
          "x-nullable": false
        },
        "OrderBy": {
          "enum": [
            "Newest",
            "Oldest",
            "Suggested"
          ],
          "type": "string",
          "x-nullable": false
        },
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PredictionQueryTag"
          },
          "x-nullable": true
        },
        "IterationId": {
          "format": "uuid",
          "type": "string",
          "x-nullable": true
        },
        "StartTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "EndTime": {
          "format": "date-time",
          "type": "string",
          "x-nullable": true
        },
        "Application": {
          "type": "string",
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "PredictionQueryTag": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "MinThreshold": {
          "format": "float",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        },
        "MaxThreshold": {
          "format": "float",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "PredictionQuery": {
      "type": "object",
      "properties": {
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Prediction"
          },
          "readOnly": true,
          "x-nullable": true
        },
        "Token": {
          "$ref": "#/definitions/PredictionQueryToken",
          "readOnly": true
        }
      },
      "x-nullable": true
    },
    "Prediction": {
      "description": "result of an image classification request",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Project": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Iteration": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Created": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Predictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PredictionTag"
          },
          "readOnly": true,
          "x-nullable": true
        },
        "ImageUri": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "ThumbnailUri": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageUrl": {
      "type": "object",
      "properties": {
        "Url": {
          "type": "string",
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImagePredictionResult": {
      "description": "result of an image prediction request",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Project": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Iteration": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Created": {
          "format": "date-time",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Predictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageTagPrediction"
          },
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ImageTagPrediction": {
      "type": "object",
      "properties": {
        "TagId": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Tag": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Probability": {
          "format": "float",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "Project": {
      "description": "Represents a project",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "Gets the project id",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Name": {
          "description": "Gets or sets the name of the project",
          "type": "string",
          "x-nullable": true
        },
        "Description": {
          "description": "Gets or sets the description of the project",
          "type": "string",
          "x-nullable": true
        },
        "Settings": {
          "$ref": "#/definitions/ProjectSettings",
          "description": "Gets or sets the project settings"
        },
        "CurrentIterationId": {
          "format": "uuid",
          "description": "Gets the current iteration id",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Created": {
          "format": "date-time",
          "description": "Gets the date this project was created",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "LastModified": {
          "format": "date-time",
          "description": "Gets the date this project was last modifed",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "ThumbnailUri": {
          "description": "Gets the thumbnail url representing the image",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "ProjectSettings": {
      "description": "Represents settings associated with a project",
      "type": "object",
      "properties": {
        "DomainId": {
          "format": "uuid",
          "description": "Gets or sets the id of the Domain to use with this project",
          "type": "string",
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "Iteration": {
      "description": "Iteration model to be sent over JSON",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "Gets the id of the iteration",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Name": {
          "description": "Gets or sets the name of the iteration",
          "type": "string",
          "x-nullable": true
        },
        "IsDefault": {
          "description": "Gets or sets a value indicating whether the iteration is the default iteration for the project",
          "type": "boolean",
          "x-nullable": false
        },
        "Status": {
          "description": "Gets the current iteration status",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Created": {
          "format": "date-time",
          "description": "Gets the time this iteration was completed",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "LastModified": {
          "format": "date-time",
          "description": "Gets the time this iteration was last modified",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "TrainedAt": {
          "format": "date-time",
          "description": "Gets the time this iteration was last modified",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "ProjectId": {
          "format": "uuid",
          "description": "Gets the project id of the iteration",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Exportable": {
          "description": "Whether the iteration can be exported to another format for download",
          "type": "boolean",
          "readOnly": true,
          "x-nullable": false
        },
        "DomainId": {
          "format": "uuid",
          "description": "Get or sets a guid of the domain the iteration has been trained on",
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "IterationPerformance": {
      "description": "Represents the detailed performance data for a trained iteration",
      "type": "object",
      "properties": {
        "PerTagPerformance": {
          "description": "Gets the per-tag performance details for this iteration",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagPerformance"
          },
          "readOnly": true,
          "x-nullable": true
        },
        "Precision": {
          "format": "double",
          "description": "Gets the precision",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        },
        "PrecisionStdDeviation": {
          "format": "double",
          "description": "Gets the standard deviation for the precision",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        },
        "Recall": {
          "format": "double",
          "description": "Gets the recall",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        },
        "RecallStdDeviation": {
          "format": "double",
          "description": "Gets the standard deviation for the recall",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "TagPerformance": {
      "description": "Represents performance data for a particular tag in a trained iteration",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Name": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        },
        "Precision": {
          "format": "double",
          "description": "Gets the precision",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        },
        "PrecisionStdDeviation": {
          "format": "double",
          "description": "Gets the standard deviation for the precision",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        },
        "Recall": {
          "format": "double",
          "description": "Gets the recall",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        },
        "RecallStdDeviation": {
          "format": "double",
          "description": "Gets the standard deviation for the recall",
          "type": "number",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "Export": {
      "type": "object",
      "properties": {
        "Platform": {
          "enum": [
            "CoreML",
            "TensorFlow"
          ],
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Status": {
          "enum": [
            "Exporting",
            "Failed",
            "Done"
          ],
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "DownloadUri": {
          "type": "string",
          "readOnly": true,
          "x-nullable": true
        }
      },
      "x-nullable": true
    },
    "TagList": {
      "type": "object",
      "properties": {
        "Tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "readOnly": true,
          "x-nullable": true
        },
        "TotalTaggedImages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "x-nullable": false
        },
        "TotalUntaggedImages": {
          "format": "int32",
          "type": "integer",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "Tag": {
      "description": "Represents a Tag",
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "Gets the Tag ID",
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "Name": {
          "description": "Gets or sets the name of the tag",
          "type": "string",
          "x-nullable": true
        },
        "Description": {
          "description": "Gets or sets the description of the tag",
          "type": "string",
          "x-nullable": true
        },
        "ImageCount": {
          "format": "int32",
          "description": "Gets the number of images with this tag",
          "type": "integer",
          "readOnly": true,
          "x-nullable": false
        }
      },
      "x-nullable": true
    },
    "DomainArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Domain"
      },
      "x-nullable": true
    },
    "ImageArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Image"
      },
      "x-nullable": true
    },
    "ProjectArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Project"
      },
      "x-nullable": true
    },
    "IterationArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Iteration"
      },
      "x-nullable": true
    },
    "ExportArray": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Export"
      },
      "x-nullable": true
    }
  }
}
